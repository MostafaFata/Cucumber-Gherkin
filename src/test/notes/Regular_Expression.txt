Regular Expressions in Cucumber:
    - Identify which parts of scenarios should be passed a parameters
    - More powerful than Cucumber Expressions
    - Harder to read than Cucumber Expressions
    - Widely supported on older versions of cucumber and on every IDE


Simple Regular Expressions:
    ^            → The start of the string
    $            → The end of the string
    (.*)         → Matches anything (including nothing)
    (.+)         → Matches at least one of anything

    (\\d+)       → A sequence of digits
    (\\w+)       → A sequence of letters or digits
    [A-Za-z]+    → Matches only letters (uppercase/lowercase)


Scenario: Ordering smoothie
    Given I ordered 9 Banana smoothies

@Given("^I ordered (\\d+) (.*) smoothies$")
    public void orderingSmoothies(int amount, String smoothie){ //.. }


Equivalent Expressions:

    "Given I ordered a smoothie"
    "Given I have ordered a smoothie"
    "Given I have ordered an apple smoothie"


    s?he                     → Optional character: matches "she" or "he"
    an?                      → Matches "a" or "an"
    (?:order|have ordered)   → Matches "orders" or "has ordered" but does not capture it as a parameter


Scenario: Michael orders smoothie
    Given Michael is a member
    When he orders 2 Green Goodness smoothies
    Then the total cost should be $10.12

@Given("^s?he (?:orders|has ordered) (//+d) (.*) smoothies?$")
    public void orderingSmoothie(String name, int count, String smoothie){ //.. }



    \"([^\"]*)\"        → Matches any text inside quotes
    "(.*?)"             → Matches text inside double quotes

Scenario: Successful Login
    Given user enters username "michael" and password "xyz123"

@Given("^user enters username \"([^\"*])\" and password \"([^\"*])\"$")
    public void login(String username, String password){ //.. }


Scenario: Check optional middle name
  Given The user's full name is "Thomas Kraemer"
  Given The user's full name is "Thomas Robert Kraemer"

@Given("^The user's full name is \"([A-Za-z]+)(?: ([A-Za-z]+))? ([A-Za-z]+)\"$")
    public void getFullname(String firstname, String middlename, String lastname){//..}

    ([A-Za-z]+) → Firstname (required)
    (?: ([A-Za-z]+))? → Middlename (optional, ? makes it optional)
    ([A-Za-z]+) → Lastname (required)


Scenario: Validate price
    Given The price of product is 10.99

@Given("^The product costs \\$(\\d+\\.\\d{2})$")
    public void productPrice(double price){//..}

    \\$ → Escapes the dollar sign $
    (\\d+\\.\\d{2}) → Matches a number with two decimal places